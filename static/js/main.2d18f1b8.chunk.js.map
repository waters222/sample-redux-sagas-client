{"version":3,"sources":["assets/images/avatar_0.svg","assets/images/logo.svg","stores/language/types.ts","stores/action-helper.ts","stores/language/actions.ts","stores/account/types.ts","stores/account/actions.ts","constants/cookie.ts","stores/account/selectors.ts","pages/account/basic-setting.tsx","pages/not-found.tsx","pages/account/notification-setting.tsx","pages/account/account.tsx","stores/language/reducers.ts","utils/language-helpers.ts","services/index.ts","pages/dashboard/home.tsx","pages/dashboard.tsx","pages/login.tsx","app.tsx","stores/account/reducers.ts","stores/index.ts","sagas/account.ts","sagas/index.ts","configure-store.ts","configs/config.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","LanguageActionType","createAction","type","payload","undefined","AccountActionType","LanguageActions","name","CHANGE_LANGUAGE","lang","Cookie","AccountActions","login","password","LOGIN","loginSuccessful","session","LOGIN_SUCCESSFUL","loginFailed","error","LOGIN_FAILED","logout","LOGOUT","logoutSuccessful","LOGOUT_SUCCESSFUL","logoutFailed","LOGOUT_FAILED","getAccountInfo","GET_INFO","getAccountInfoSuccessful","email","phone","GET_INFO_SUCCESSFUL","getInfoFailed","GET_INFO_FAILED","updateInfo","UPDATE_INFO","updateInfoSuccessful","UPDATE_INFO_SUCCESSFUL","updateInfoFailed","UPDATE_INFO_FAILED","isLogin","createSelector","state","getLoginError","errorLogin","getAccountPhone","info","BasicSetting","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeEmail","e","target","value","form","getFieldValue","setState","bHasUpdate","onChangePhone","onSubmit","validateFields","err","values","beforeUpload","file","intl","message","concat","formatMessage","id","format","size","handleUploadChange","status","originFileObj","reader","FileReader","addEventListener","result","ArrayBuffer","bUploading","avatarData","readAsDataURL","getInfo","bIsGetInfoRequesting","react","className","spin","_this$props","getFieldDecorator","avatarSrc","avatar","es_form","Item","label","initialValue","rules","required","pattern","input","onChange","es_button","onClick","htmlType","disabled","loading","bIsUpdateInfoRequesting","index_es","src","upload","action","showUploadList","icon","React","WrappedForm","Form","create","connect","_ref","account","isUpdateInfoRequesting","isGetInfoRequesting","dispatch","injectIntl","NotFound","onClickBackToHome","history","push","NotificationSetting","Account","getPath","path","location","pathname","replace","match","url","length","onSelect","selection","key","menu","mode","theme","selectedKeys","Switch","Route","exact","component","DefaultLanguage","initialState","language","reducer","arguments","ResolveLanguage","console","log","Cookies","Language","storeLangCookie","reload","Languages","getLanguageWithoutRegionCode","toLowerCase","split","ErrorAjaxType","Home","Header","Layout","Sider","Content","Dashboard","onChangeLanguage","changeLanguage","toggle","collapsed","onClickLogo","onClickLogout","onClickAccountInfo","getMenuKeysFromPath","selectedKey","temp","openKey","langMenu","menuItems","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","return","accountMenu","Divider","nextProps","nextState","nextContext","bIsLogin","Redirect","to","_this$getMenuKeysFrom","layout","trigger","collapsible","logo","defaultOpenKeys","SubMenu_default","a","title","dropdown","overlay","userName","Login","onChangeRememberMe","checked","bLoginRequesting","loginError","login_Header","login_Content","es_alert","showIcon","placeholder","prefix","style","color","float","es_checkbox","WrappedLoginForm","isLoginRequesting","App","isLogoutRequesting","errorLogout","errorUpdateInfo","errorGetInfo","update","$set","_action$payload","Session","JSON","stringify","storeSessionCookie","clearSessionCookie","_action$payload2","_action$payload3","createRootReducer","combineReducers","accountReducer","lanReducer","router","connectRouter","ErrorAjax","Error","fakeSession","asyncTimeout","ms","Promise","resolve","setTimeout","fakeLogin","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","Date","now","INVALID_PASSWORD","abrupt","stop","_x","_x2","apply","fakeLogout","_ref2","_callee2","_context2","fakeUpdateInfo","_ref3","_callee3","_context3","sessionStorage","setItem","_x3","_x4","fakeGetInfo","_ref4","_callee4","ret","_JSON$parse","_context4","getItem","parse","t0","NETWORK_ERROR","accountSaga","sent","put","_marked","_marked2","_marked3","_marked4","_context5","all","takeEvery","_marked5","rootSaga","_arr","_loop","_i","saga","spawn","delegateYield","sagas_marked","configureStore","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","routerMiddleware","store","createStore","run","config","BaseConfig","isDev","host","basePath","bIsDev","createBrowserHistory","basename","navigator","languages","getLangCookie","languageSetting","addLocaleData","zh","languageWithoutRegionCode","locale","zhCN","messages","zhCNMessages","en","enUS","enUSMessages","getLanguageSetting","sessionCookie","sessionObject","getSessionCookie","objectSpread","accountInitialState","search","hash","ReactDOM","es","locale_provider","lib","src_app","document","getElementById"],"mappings":"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","file":"static/js/main.2d18f1b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar_0.80988518.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.8e26f220.svg\";","export enum LanguageActionType {\n    CHANGE_LANGUAGE = '@@language/CHANGE_LANGUAGE',\n}\n\nexport interface LanguageState {\n    readonly language: string;\n}\n","export interface Action<T extends string> {\n    type: T;\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P;\n}\n\nexport function createAction<T extends string>(type: T): Action<T>;\nexport function createAction<T extends string, P>(\n    type: T,\n    payload: P\n): ActionWithPayload<T, P>;\nexport function createAction<T extends string, P>(type: T, payload?: P) {\n    return payload === undefined ? { type } : { type, payload };\n}\n\ntype FunctionType = (...args: any[]) => any;\ntype ActionCreatorsMapObject = { [actionCreator: string]: FunctionType };\nexport type ActionUnion<A extends ActionCreatorsMapObject> = ReturnType<\n    A[keyof A]\n>;\n","import { ActionUnion, createAction } from '../action-helper';\nimport { LanguageActionType } from './types';\n\nexport const LanguageActions = {\n    changeLanguage: (name: string) =>\n        createAction(LanguageActionType.CHANGE_LANGUAGE, { lang: name }),\n};\n\nexport type LanguageActions = ActionUnion<typeof LanguageActions>;\n","import { ErrorAjax } from '../../services';\n\nexport enum AccountActionType {\n    LOGIN = '@@account/LOGIN',\n    LOGIN_SUCCESSFUL = '@@account/LOGIN_SUCCESSFUL',\n    LOGIN_FAILED = '@@account/LOGIN_FAILED',\n    LOGOUT = '@@account/LOGOUT',\n    LOGOUT_SUCCESSFUL = '@@account/LOGOUT_SUCCESSFUL',\n    LOGOUT_FAILED = '@@account/LOGOUT_FAILED',\n\n    GET_INFO = '@@account/GET_INFO',\n    GET_INFO_SUCCESSFUL = '@@account/GET_INFO_SUCCESSFUL',\n    GET_INFO_FAILED = '@@account/GET_INFO_FAILED',\n\n    UPDATE_INFO = '@@account/UPDATE_INFO',\n    UPDATE_INFO_SUCCESSFUL = '@@account/UPDATE_INFO_SUCCESSFUL',\n    UPDATE_INFO_FAILED = '@@account/UPDATE_INFO_FAILED',\n}\n\nexport interface AccountState {\n    readonly name: string | undefined;\n    readonly session: string | undefined;\n\n    readonly isLoginRequesting: boolean;\n    readonly errorLogin: ErrorAjax | undefined;\n\n    readonly isLogoutRequesting: boolean;\n    readonly errorLogout: ErrorAjax | undefined;\n\n    readonly isUpdateInfoRequesting: boolean;\n    readonly errorUpdateInfo: ErrorAjax | undefined;\n\n    readonly isGetInfoRequesting: boolean;\n    readonly errorGetInfo: ErrorAjax | undefined;\n    info: AccountInfo | undefined;\n}\n\nexport interface AccountInfo {\n    readonly email: string;\n    readonly phone: string;\n}\n","import { AccountActionType } from './types';\nimport { ActionUnion, createAction } from '../action-helper';\nimport { ErrorAjax } from '../../services';\n\nexport const AccountActions = {\n    login: (name: string, password: string) =>\n        createAction(AccountActionType.LOGIN, {\n            name: name,\n            password: password,\n        }),\n\n    loginSuccessful: (name: string, session: string) =>\n        createAction(AccountActionType.LOGIN_SUCCESSFUL, {\n            name: name,\n            session: session,\n        }),\n\n    loginFailed: (error: ErrorAjax) =>\n        createAction(AccountActionType.LOGIN_FAILED, error),\n\n    logout: () => createAction(AccountActionType.LOGOUT),\n\n    logoutSuccessful: () => createAction(AccountActionType.LOGOUT_SUCCESSFUL),\n\n    logoutFailed: (error: ErrorAjax) =>\n        createAction(AccountActionType.LOGOUT_FAILED, error),\n\n    getAccountInfo: () => createAction(AccountActionType.GET_INFO),\n\n    getAccountInfoSuccessful: (email: string, phone: string) =>\n        createAction(AccountActionType.GET_INFO_SUCCESSFUL, {\n            email: email,\n            phone: phone,\n        }),\n\n    getInfoFailed: (error: ErrorAjax) =>\n        createAction(AccountActionType.GET_INFO_FAILED, {\n            error: error,\n        }),\n\n    updateInfo: (email: string, phone: string) =>\n        createAction(AccountActionType.UPDATE_INFO, {\n            email: email,\n            phone: phone,\n        }),\n\n    updateInfoSuccessful: (email: string, phone: string) =>\n        createAction(AccountActionType.UPDATE_INFO_SUCCESSFUL, {\n            email: email,\n            phone: phone,\n        }),\n    updateInfoFailed: (error: ErrorAjax) =>\n        createAction(AccountActionType.UPDATE_INFO_FAILED, {\n            error: error,\n        }),\n};\n\nexport type AccountActions = ActionUnion<typeof AccountActions>;\n","import * as Cookies from 'es-cookie';\n\nexport enum Cookie {\n    Language = 'cookie/language',\n    Session = 'cookie/session',\n}\n\n// for language setting\nconst getLangCookie = (): string => {\n    const language = Cookies.get(Cookie.Language);\n    return language !== undefined\n        ? language\n        : (navigator.languages && navigator.languages[0]) || navigator.language;\n};\n\nconst storeLangCookie = (lang: string) => {\n    Cookies.set(Cookie.Language, lang);\n};\n\n//  for session\nexport interface SessionCookieType {\n    name: string;\n    session: string;\n}\n\nconst getSessionCookie = (): SessionCookieType | undefined => {\n    const sessionCookie = Cookies.get(Cookie.Session);\n    if (sessionCookie !== undefined) {\n        try {\n            const sessionObject = JSON.parse(sessionCookie);\n\n            // make sure both field is not empty\n            if (\n                sessionObject.name !== undefined &&\n                sessionObject.name !== '' &&\n                sessionObject.session !== undefined &&\n                sessionObject.session !== ''\n            ) {\n                return {\n                    name: sessionObject.name,\n                    session: sessionObject.session,\n                };\n            }\n        } catch (err) {\n            console.log(\n                `[ERROR] parse session cookie object failed: ${err.message}`\n            );\n        }\n    }\n    return undefined;\n};\n\nconst storeSessionCookie = (name: string, session: string): boolean => {\n    try {\n        Cookies.set(\n            Cookie.Session,\n            JSON.stringify({ name: name, session: session })\n        );\n        return true;\n    } catch (err) {\n        console.log(`[ERROR] store session into cookie failed: ${err.message}`);\n        return false;\n    }\n};\n\nconst clearSessionCookie = (): boolean => {\n    try {\n        Cookies.remove(Cookie.Session);\n        return true;\n    } catch (err) {\n        console.log(`[ERROR] clear session into cookie failed: ${err.message}`);\n        return false;\n    }\n};\n\nexport {\n    getSessionCookie,\n    storeSessionCookie,\n    clearSessionCookie,\n    getLangCookie,\n    storeLangCookie,\n};\n","import { createSelector, Selector } from 'reselect';\nimport { AccountState } from './types';\n\nexport const getSession = (state: AccountState) => state.session;\n\nexport const getName = (state: AccountState) => state.name;\n\nexport const isLogin: Selector<AccountState, boolean> = createSelector(\n    getSession,\n    getName,\n    (session, name) => session !== undefined && name !== undefined\n);\n\nexport const isLoginRequesting = (state: AccountState) =>\n    state.isLoginRequesting;\nexport const getLoginError = (state: AccountState) => state.errorLogin;\n\nexport const getAccountEmail = (state: AccountState) => {\n    if (state.info !== undefined) {\n        return state.info.email;\n    }\n    return '';\n};\nexport const getAccountPhone = (state: AccountState) => {\n    if (state.info !== undefined) {\n        return state.info.phone;\n    }\n    return '';\n};\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport './basic-setting.less';\nimport { Avatar, Button, Form, Input, Spin, Upload, Icon, message } from 'antd';\nimport { ChangeEvent } from 'react';\nimport { FormattedMessage, InjectedIntlProps, injectIntl } from 'react-intl';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { Dispatch } from 'redux';\nimport { AccountActions } from '../../stores/account/actions';\nimport { ApplicationState } from '../../stores';\nimport {\n    getAccountEmail,\n    getAccountPhone,\n} from '../../stores/account/selectors';\n\nimport avatar from '../../assets/images/avatar_0.svg';\nimport { RcFile, UploadChangeParam } from 'antd/lib/upload/interface';\n\ninterface Props extends FormComponentProps, InjectedIntlProps {\n    getInfo: () => void;\n    updateInfo: (email: string, phone: string) => void;\n    email: string;\n    phone: string;\n    bIsUpdateInfoRequesting: boolean;\n    bIsGetInfoRequesting: boolean;\n}\n\ninterface States {\n    bHasUpdate: boolean;\n    bUploading: boolean;\n    avatarData: string | null;\n}\n\nclass BasicSetting extends React.Component<Props, States> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            bHasUpdate: false,\n            bUploading: false,\n            avatarData: null,\n        };\n    }\n\n    public onChangeEmail = (e: ChangeEvent<HTMLInputElement>) => {\n        const email = e.target.value;\n        const phone: string = this.props.form.getFieldValue('phone');\n        this.setState({\n            bHasUpdate:\n                this.props.email !== email || this.props.phone !== phone,\n        });\n    };\n\n    public onChangePhone = (e: ChangeEvent<HTMLInputElement>) => {\n        const phone = e.target.value;\n        const email: string = this.props.form.getFieldValue('email');\n        this.setState({\n            bHasUpdate:\n                this.props.email !== email || this.props.phone !== phone,\n        });\n    };\n\n    public onSubmit = () => {\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                this.props.updateInfo(values.email, values.phone);\n            }\n        });\n    };\n\n    public beforeUpload = (file: RcFile): boolean | Promise<any> => {\n        const { intl } = this.props;\n        switch (file.type) {\n            case 'image/jpeg':\n                break;\n            case 'image/jpg':\n                break;\n            case 'image/png':\n                break;\n            case 'image/svg+xml':\n                break;\n            default:\n                message.error(\n                    `${intl.formatMessage(\n                        { id: 'avatar_upload_invalid_format' },\n                        { format: file.type }\n                    )}`\n                );\n                return false;\n        }\n        const isTooLarge = file.size / 1024 / 1024 > 2;\n        if (isTooLarge) {\n            message.error(\n                `${intl.formatMessage({ id: 'avatar_upload_too_large' })}`\n            );\n            return false;\n        }\n        return true;\n    };\n\n    public handleUploadChange = (info: UploadChangeParam) => {\n        if (info.file.status === 'uploading') {\n            this.setState({ bUploading: true });\n            return;\n        }\n        if (\n            info.file.status === 'done' &&\n            info.file.originFileObj !== undefined\n        ) {\n            const reader = new FileReader();\n            reader.addEventListener('load', () => {\n                if (!(reader.result instanceof ArrayBuffer)) {\n                    this.setState({\n                        bUploading: false,\n                        avatarData: reader.result,\n                    });\n                }\n            });\n            reader.readAsDataURL(info.file.originFileObj);\n        }\n    };\n\n    public componentDidMount(): void {\n        this.props.getInfo();\n    }\n\n    public render() {\n        if (this.props.bIsGetInfoRequesting) {\n            return (\n                <div className=\"loading-page\">\n                    <Spin size=\"large\" />\n                </div>\n            );\n        } else {\n            const { intl, email, phone } = this.props;\n            const { getFieldDecorator } = this.props.form;\n            const avatarSrc =\n                this.state.avatarData !== null ? this.state.avatarData : avatar;\n            return (\n                <div className=\"basic-setting-container\">\n                    <div className=\"leftPart\">\n                        <Form>\n                            <Form.Item label=\"Email\">\n                                {getFieldDecorator('email', {\n                                    initialValue: email,\n                                    rules: [\n                                        {\n                                            required: true,\n                                            message: intl.formatMessage({\n                                                id: 'email_input_error_empty',\n                                            }),\n                                        },\n                                        {\n                                            pattern: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                                            message: intl.formatMessage({\n                                                id: 'email_input_error_invalid',\n                                            }),\n                                        },\n                                    ],\n                                })(<Input onChange={this.onChangeEmail} />)}\n                            </Form.Item>\n                            <Form.Item\n                                label={intl.formatMessage({\n                                    id: 'phone-number',\n                                })}\n                            >\n                                {getFieldDecorator('phone', {\n                                    initialValue: phone,\n                                    rules: [\n                                        {\n                                            required: true,\n                                            message: intl.formatMessage({\n                                                id: 'phone_input_error_empty',\n                                            }),\n                                        },\n                                        {\n                                            pattern: /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/,\n                                            message: intl.formatMessage({\n                                                id: 'phone_input_error_invalid',\n                                            }),\n                                        },\n                                    ],\n                                })(<Input onChange={this.onChangePhone} />)}\n                            </Form.Item>\n                            <Button\n                                onClick={this.onSubmit}\n                                htmlType=\"button\"\n                                type=\"primary\"\n                                disabled={!this.state.bHasUpdate}\n                                loading={this.props.bIsUpdateInfoRequesting}\n                            >\n                                <FormattedMessage id=\"update-information\" />\n                            </Button>\n                        </Form>\n                    </div>\n                    <div className=\"rightPart\">\n                        <div className=\"avatarTitle\">\n                            <FormattedMessage id=\"avatar\" />\n                        </div>\n                        <div className=\"avatarIcon\">\n                            <Avatar size={128} src={avatarSrc} />\n                        </div>\n                        <Upload\n                            name=\"logo\"\n                            beforeUpload={this.beforeUpload}\n                            action=\"//jsonplaceholder.typicode.com/posts/\"\n                            showUploadList={false}\n                            onChange={this.handleUploadChange}\n                        >\n                            <Button loading={this.state.bUploading}>\n                                <Icon type=\"upload\" />{' '}\n                                <FormattedMessage id=\"avatar_upload\" />\n                            </Button>\n                        </Upload>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nconst mapStateToProps = ({ account }: ApplicationState) => ({\n    email: getAccountEmail(account),\n    phone: getAccountPhone(account),\n    bIsUpdateInfoRequesting: account.isUpdateInfoRequesting,\n    bIsGetInfoRequesting: account.isGetInfoRequesting,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    getInfo: () => dispatch(AccountActions.getAccountInfo()),\n    updateInfo: (email: string, phone: string) =>\n        dispatch(AccountActions.updateInfo(email, phone)),\n});\n\nconst WrappedForm = Form.create({\n    name: 'basic_setting',\n})(BasicSetting);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(injectIntl(WrappedForm));\n","import * as React from 'react';\nimport { Button } from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport './not-found.less';\nimport { RouteComponentProps } from 'react-router';\n\nclass NotFound extends React.Component<RouteComponentProps> {\n    public onClickBackToHome = () => {\n        this.props.history.push('/dashboard');\n    };\n\n    public render() {\n        return (\n            <div className=\"layout-top-layer not-found\">\n                <div className=\"container\">\n                    <h1>404</h1>\n                    <div className=\"not-found-desc\">\n                        <FormattedMessage id=\"not_fount_desc\" />\n                    </div>\n                    <div className=\"not-fount-actions\">\n                        <Button\n                            type=\"primary\"\n                            size=\"large\"\n                            onClick={this.onClickBackToHome}\n                        >\n                            <FormattedMessage id=\"back_to_home\" />\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default NotFound;\n","import * as React from 'react';\n\nclass NotificationSetting extends React.Component {\n    public render() {\n        return <div>notification setting</div>;\n    }\n}\n\nexport default NotificationSetting;\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Menu } from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport { Route, RouteComponentProps, Switch } from 'react-router';\nimport BasicSetting from './basic-setting';\nimport NotFound from '../not-found';\nimport './account.less';\nimport NotificationSetting from './notification-setting';\nimport { SelectParam } from 'antd/lib/menu';\n\ninterface Props extends RouteComponentProps {\n    nothing: boolean;\n}\n\nclass Account extends React.Component<Props> {\n    public getPath = (props: Props) => {\n        const path = props.location.pathname.replace(props.match.url, '');\n        return path.length === 0 ? '/' : path;\n    };\n\n    public onSelect = (selection: SelectParam) => {\n        const url = selection.key === '/' ? '' : selection.key;\n        this.props.history.push(`${this.props.match.url}${url}`);\n    };\n\n    public render() {\n        const { match } = this.props;\n        const path = this.getPath(this.props);\n        return (\n            <div className=\"account\">\n                <div className=\"leftMenu\">\n                    <Menu\n                        mode=\"inline\"\n                        theme=\"light\"\n                        className=\"menu\"\n                        selectedKeys={[path]}\n                        onSelect={this.onSelect}\n                    >\n                        <Menu.Item key=\"/\">\n                            <FormattedMessage id=\"account_basic_setting\" />\n                        </Menu.Item>\n                        <Menu.Item key=\"/notification\">\n                            <FormattedMessage id=\"account_notification_setting\" />\n                        </Menu.Item>\n                    </Menu>\n                </div>\n                <div className=\"rightSide\">\n                    <Switch>\n                        <Route\n                            exact={true}\n                            path={`${match.url}`}\n                            component={BasicSetting}\n                        />\n                        <Route\n                            exact={true}\n                            path={`${match.url}/notification`}\n                            component={NotificationSetting}\n                        />\n                        <Route component={NotFound} />\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default connect()(Account);\n","import { LanguageActionType, LanguageState } from './types';\nimport { Reducer } from 'redux';\nimport { storeLangCookie } from '../../constants/cookie';\nimport { ResolveLanguage } from '../../utils/language-helpers';\n\nexport const DefaultLanguage = 'en_US';\n\nconst initialState: LanguageState = {\n    language: DefaultLanguage,\n};\n\nconst reducer: Reducer<LanguageState> = (state = initialState, action) => {\n    if (action.type === LanguageActionType.CHANGE_LANGUAGE) {\n        const { lang } = action.payload;\n        const language = ResolveLanguage(lang);\n        // lets save the cookie\n        console.log(`change lang from ${state.language} to ${language}`);\n        if (state.language !== language) {\n            storeLangCookie(language);\n            location.reload();\n        }\n    }\n    return state;\n};\n\nexport { reducer as lanReducer };\n","import { addLocaleData } from 'react-intl';\nimport { Locale } from 'antd/lib/locale-provider';\nimport { DefaultLanguage } from '../stores/language/reducers';\n\nimport * as en from 'react-intl/locale-data/en';\nimport enUS from 'antd/lib/locale-provider/en_US';\nimport enUSMessages from '../locales/en_US.json';\n\nimport * as zh from 'react-intl/locale-data/zh';\nimport zhCN from 'antd/lib/locale-provider/zh_CN';\nimport zhCNMessages from '../locales/zh_CN.json';\n\nexport interface LanguageTypes {\n    key: string;\n    name: string;\n}\n\nexport const Languages = [\n    {\n        key: 'zh_CN',\n        name: 'lang_chinese',\n    },\n    {\n        key: 'en_US',\n        name: 'lang_english',\n    },\n];\n\nexport interface LanguageSetting {\n    readonly languageWithoutRegionCode: string;\n    readonly messages: object;\n    readonly locale: Locale;\n}\n\nexport function getLanguageWithoutRegionCode(language: string) {\n    return language.toLowerCase().split(/[_-]+/)[0];\n}\n\nexport function ResolveLanguage(name: string): string {\n    name = name.replace('-', '_');\n    switch (name) {\n        case 'zh_CN':\n            return name;\n        default:\n            return DefaultLanguage;\n    }\n}\n\nexport function getLanguageSetting(language: string): LanguageSetting {\n    language = ResolveLanguage(language);\n    // default en_US no need to add language\n    switch (language) {\n        case 'zh_CN': {\n            addLocaleData(zh);\n            return {\n                languageWithoutRegionCode: getLanguageWithoutRegionCode(\n                    language\n                ),\n                locale: zhCN,\n                messages: zhCNMessages,\n            };\n        }\n        default: {\n            addLocaleData(en);\n            return {\n                languageWithoutRegionCode: getLanguageWithoutRegionCode(\n                    DefaultLanguage\n                ),\n                locale: enUS,\n                messages: enUSMessages,\n            };\n        }\n    }\n}\n","import { AccountInfo } from '../stores/account/types';\n\nclass ErrorAjax extends Error {\n    public id: string;\n    public message: string = '';\n    constructor(id: string, message?: string) {\n        super(message);\n        this.id = id;\n        if (message !== undefined) {\n            this.message = message;\n        }\n    }\n}\n\nexport enum ErrorAjaxType {\n    INVALID_PASSWORD = 'ajax_invalid_password',\n    NETWORK_ERROR = 'network error',\n}\n\nconst asyncTimeout = (ms: number) => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nlet fakeSession: string | undefined;\n\nconst fakeLogin = async (name: string, password: string) => {\n    await asyncTimeout(1500);\n    if (name === 'admin' && password === 'admin') {\n        fakeSession = `fake_session_${Date.now()}`;\n    } else {\n        throw new ErrorAjax(ErrorAjaxType.INVALID_PASSWORD);\n    }\n    return fakeSession;\n};\n\nconst fakeLogout = async () => {\n    await asyncTimeout(300);\n    if (fakeSession !== undefined) {\n        fakeSession = undefined;\n    }\n};\n\nconst fakeUpdateInfo = async (email: string, phone: string) => {\n    sessionStorage.setItem(\n        'account_info',\n        JSON.stringify({ email: email, phone: phone })\n    );\n    await asyncTimeout(1000);\n};\n\nconst fakeGetInfo = async (): Promise<AccountInfo> => {\n    const temp = sessionStorage.getItem('account_info');\n    const ret = {\n        email: '',\n        phone: '',\n    };\n    if (temp !== null) {\n        try {\n            const { email, phone } = JSON.parse(temp);\n            if (email) {\n                ret.email = email;\n            }\n            if (phone) {\n                ret.phone = phone;\n            }\n        } catch (err) {\n            throw new ErrorAjax(ErrorAjaxType.NETWORK_ERROR);\n        }\n    }\n    await asyncTimeout(1000);\n    return ret;\n};\n\nexport { fakeLogin, fakeLogout, fakeUpdateInfo, fakeGetInfo, ErrorAjax };\n","import * as React from 'react';\n\nclass Home extends React.Component{\n\n    public render(){\n        return (\n            <div>Home</div>\n        )\n    }\n}\n\nexport default Home","import * as React from 'react';\nimport { Dispatch } from 'redux';\nimport { ApplicationState } from '../stores';\nimport { connect } from 'react-redux';\nimport { LanguageActions } from '../stores/language/actions';\nimport { Dropdown, Icon, Layout, Menu } from 'antd';\nimport './dashboard.less';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router';\nimport Account from './account/account';\nimport NotFound from './not-found';\nimport { isLogin } from '../stores/account/selectors';\nimport { AccountActions } from '../stores/account/actions';\nimport { FormattedMessage } from 'react-intl';\nimport { ClickParam, SelectParam } from 'antd/lib/menu';\nimport { Languages } from '../utils/language-helpers';\nimport Home from './dashboard/home';\nimport logo from '../assets/images/logo.svg';\nimport SubMenu from 'antd/lib/menu/SubMenu';\n\nconst { Header, Sider, Content } = Layout;\n\ninterface Props extends RouteComponentProps {\n    readonly language: string;\n    readonly userName: string | undefined;\n    readonly bIsLogin: boolean;\n    changeLanguage: (language: string) => void;\n    logout: () => void;\n}\n\ninterface States {\n    collapsed: boolean;\n}\n\nclass Dashboard extends React.Component<Props, States> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            collapsed: false,\n        };\n    }\n\n    public onChangeLanguage = (e: ClickParam) => {\n        this.props.changeLanguage(e.key);\n    };\n\n    public shouldComponentUpdate(\n        nextProps: Props,\n        nextState: States,\n        nextContext: any\n    ): boolean {\n        return this.props.language === nextProps.language;\n    }\n\n    public toggle = () => {\n        this.setState({ collapsed: !this.state.collapsed });\n    };\n\n    public onClickLogo = () => {\n        this.props.history.push(`${this.props.match.url}`);\n    };\n\n    public onClickLogout = () => {\n        this.props.logout();\n    };\n\n    public onClickAccountInfo = () => {\n        this.props.history.push(`${this.props.match.url}/account/info`);\n    };\n\n    public getMenuKeysFromPath = (props: Props) => {\n        const path = props.location.pathname.replace(props.match.url, '');\n        const selectedKey = path.length === 0 ? '/' : path;\n        const temp = selectedKey.split('/');\n        if (temp.length > 2) {\n            return {\n                selectedKey: selectedKey,\n                openKey: `/${temp[1]}`,\n            };\n        } else {\n            return {\n                selectedKey: selectedKey,\n                openKey: '/',\n            };\n        }\n    };\n\n    public onSelect = (selection: SelectParam) => {\n        const url = selection.key === '/' ? '' : selection.key;\n        this.props.history.push(`${this.props.match.url}${url}`);\n    };\n\n    public langMenu = () => {\n        const menuItems = [];\n        for (const lang of Languages) {\n            menuItems.push(\n                <Menu.Item key={lang.key}>\n                    <FormattedMessage id={lang.name} />\n                </Menu.Item>\n            );\n        }\n        return (\n            <Menu className=\"dropdown-menu\" onClick={this.onChangeLanguage}>\n                {menuItems}\n            </Menu>\n        );\n    };\n\n    public accountMenu = () => {\n        return (\n            <Menu className=\"dropdown-menu\">\n                <Menu.Item onClick={this.onClickAccountInfo}>\n                    <Icon type=\"user\" />\n                    <FormattedMessage id=\"account_info\" />\n                </Menu.Item>\n                <Menu.Divider />\n                <Menu.Item onClick={this.onClickLogout}>\n                    <Icon type=\"logout\" />\n                    <FormattedMessage id=\"logout\" />\n                </Menu.Item>\n            </Menu>\n        );\n    };\n\n    public render() {\n        if (!this.props.bIsLogin) {\n            return <Redirect to=\"/\" />;\n        }\n        const { match } = this.props;\n        const { selectedKey, openKey } = this.getMenuKeysFromPath(this.props);\n        return (\n            <Layout className=\"layout-top-layer\">\n                <Sider\n                    trigger={null}\n                    collapsible={true}\n                    collapsed={this.state.collapsed}\n                >\n                    <div className=\"logo\" onClick={this.onClickLogo}>\n                        <img src={logo} />\n                        <FormattedMessage id=\"client_title\" />\n                    </div>\n                    <Menu\n                        theme=\"dark\"\n                        mode=\"inline\"\n                        onSelect={this.onSelect}\n                        defaultOpenKeys={[openKey]}\n                        selectedKeys={[selectedKey]}\n                    >\n                        <Menu.Item key=\"/\">\n                            <Icon type=\"dashboard\" />\n                            <FormattedMessage id=\"dashboard\" />\n                        </Menu.Item>\n                        <SubMenu\n                            title={\n                                <span>\n                                    <Icon type=\"user\" />\n                                    <span>\n                                        <FormattedMessage id=\"account\" />\n                                    </span>\n                                </span>\n                            }\n                            key=\"/account\"\n                        >\n                            <Menu.Item key=\"/account/info\">\n                                <span>\n                                    <FormattedMessage id=\"account_info\" />\n                                </span>\n                            </Menu.Item>\n                        </SubMenu>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header className=\"header-white header-index\">\n                        <div className=\"header-index-box-shadow\">\n                            <span\n                                className=\"header-index-trigger\"\n                                onClick={this.toggle}\n                            >\n                                <Icon\n                                    className=\"trigger\"\n                                    type={\n                                        this.state.collapsed\n                                            ? 'menu-unfold'\n                                            : 'menu-fold'\n                                    }\n                                />\n                            </span>\n                            <div className=\"header-index-right\">\n                                <Dropdown overlay={this.accountMenu}>\n                                    <span className=\"index-action\">\n                                        <Icon type=\"user\" />\n                                        <span className=\"user-name\">\n                                            {this.props.userName}\n                                        </span>\n                                    </span>\n                                </Dropdown>\n                                <Dropdown overlay={this.langMenu}>\n                                    <span className=\"index-action lang-select-dropdown\">\n                                        <Icon type=\"global\" />\n                                    </span>\n                                </Dropdown>\n                            </div>\n                        </div>\n                    </Header>\n                    <Content className=\"content\">\n                        <Switch>\n                            <Route\n                                exact={true}\n                                path={`${match.url}`}\n                                component={Home}\n                            />\n                            <Route\n                                path={`${match.url}/account/info`}\n                                component={Account}\n                            />\n                            <Route component={NotFound} />\n                        </Switch>\n                    </Content>\n                </Layout>\n            </Layout>\n        );\n    }\n}\n\nconst mapStateToProps = ({ language, account }: ApplicationState) => ({\n    language: language.language,\n    userName: account.name,\n    bIsLogin: isLogin(account),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    changeLanguage: (language: string) =>\n        dispatch(LanguageActions.changeLanguage(language)),\n    logout: () => dispatch(AccountActions.logout()),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Dashboard);\n","import * as React from 'react';\nimport {\n    Alert,\n    Button,\n    Checkbox,\n    Dropdown,\n    Form,\n    Icon,\n    Input,\n    Layout,\n} from 'antd';\nimport { AccountActions } from '../stores/account/actions';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { FormattedMessage, injectIntl, InjectedIntlProps } from 'react-intl';\nimport './login.less';\nimport { Menu } from 'antd';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport { ApplicationState } from '../stores';\nimport {\n    getLoginError,\n    isLogin,\n    isLoginRequesting,\n} from '../stores/account/selectors';\nimport { ErrorAjax } from '../services';\nimport { Redirect } from 'react-router';\nimport { LanguageActions } from '../stores/language/actions';\nimport { ClickParam } from 'antd/lib/menu';\nimport { Languages } from '../utils/language-helpers';\n\nconst { Header, Content } = Layout;\n\ninterface Props extends FormComponentProps, InjectedIntlProps {\n    login: (name: string, password: string) => void;\n    changeLanguage: (lang: string) => void;\n    logout: () => void;\n    bIsLogin: boolean;\n    bLoginRequesting: boolean;\n    loginError: ErrorAjax | undefined;\n}\n\n// interface States {\n//     userName: string;\n//     password: string;\n// }\n\nclass Login extends React.Component<Props> {\n    // constructor(props: Props) {\n    //     super(props);\n    //     this.state = {\n    //         userName: '',\n    //         password: '',\n    //     };\n    // }\n    //\n    // public onChangeUserName = (e: ChangeEvent<HTMLInputElement>) => {\n    //     this.setState({ userName: e.target.value });\n    // };\n    //\n    // public onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\n    //     this.setState({ password: e.target.value });\n    // };\n\n    public onChangeRememberMe = (e: CheckboxChangeEvent) => {\n        console.log(`remember me: ${e.target.checked}`);\n    };\n\n    public onSubmit = () => {\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                this.props.login(values.userName, values.password);\n            }\n        });\n    };\n\n    public onChangeLanguage = (e: ClickParam) => {\n        this.props.changeLanguage(e.key);\n    };\n\n    public langMenu = () => {\n        const menuItems = [];\n        for (const lang of Languages) {\n            menuItems.push(\n                <Menu.Item key={lang.key}>\n                    <FormattedMessage id={lang.name} />\n                </Menu.Item>\n            );\n        }\n        return (\n            <Menu className=\"dropdown-menu\" onClick={this.onChangeLanguage}>\n                {menuItems}\n            </Menu>\n        );\n    };\n\n    public render() {\n        const { getFieldDecorator } = this.props.form;\n        const { intl, bLoginRequesting, loginError, bIsLogin } = this.props;\n        if (bIsLogin) {\n            return <Redirect to=\"/dashboard\" />;\n        }\n        return (\n            <Layout className=\"layout-top-layer\">\n                <Header className=\"header-light\">\n                    <div className=\"header-index\">\n                        <div className=\"header-index-right\">\n                            <Dropdown overlay={this.langMenu}>\n                                <span className=\"index-action lang-select-dropdown\">\n                                    <Icon type=\"global\" />\n                                </span>\n                            </Dropdown>\n                        </div>\n                    </div>\n                </Header>\n                <Content>\n                    <Layout>\n                        <Header className=\"header-light header-index-center\">\n                            <span className=\"header-title\">\n                                <FormattedMessage id=\"client_title\" />\n                            </span>\n                        </Header>\n                        <Content>\n                            <div className=\"header-desc\">\n                                <FormattedMessage id=\"client_desc\" />\n                            </div>\n                            <div className=\"container\">\n                                {loginError !== undefined ? (\n                                    <Alert\n                                        showIcon={true}\n                                        type=\"error\"\n                                        message={intl.formatMessage({\n                                            id: loginError.id,\n                                        })}\n                                    />\n                                ) : null}\n                                <Form className=\"login-form\">\n                                    <Form.Item>\n                                        {getFieldDecorator('userName', {\n                                            rules: [\n                                                {\n                                                    required: true,\n                                                    message: intl.formatMessage(\n                                                        {\n                                                            id:\n                                                                'login_username_input_error_empty',\n                                                        }\n                                                    ),\n                                                },\n                                            ],\n                                        })(\n                                            <Input\n                                                placeholder={intl.formatMessage(\n                                                    {\n                                                        id:\n                                                            'login_input_placeholder_user_name',\n                                                    }\n                                                )}\n                                                size=\"large\"\n                                                prefix={\n                                                    <Icon\n                                                        type=\"user\"\n                                                        style={{\n                                                            color:\n                                                                'rgba(0,0,0,.25)',\n                                                        }}\n                                                    />\n                                                }\n                                            />\n                                        )}\n                                    </Form.Item>\n                                    <Form.Item>\n                                        {getFieldDecorator('password', {\n                                            rules: [\n                                                {\n                                                    required: true,\n                                                    message: intl.formatMessage(\n                                                        {\n                                                            id:\n                                                                'login_password_input_error_empty',\n                                                        }\n                                                    ),\n                                                },\n                                            ],\n                                        })(\n                                            <Input\n                                                placeholder={intl.formatMessage(\n                                                    {\n                                                        id:\n                                                            'login_input_placeholder_password',\n                                                    }\n                                                )}\n                                                type=\"password\"\n                                                size=\"large\"\n                                                prefix={\n                                                    <Icon\n                                                        type=\"lock\"\n                                                        style={{\n                                                            color:\n                                                                'rgba(0,0,0,.25)',\n                                                        }}\n                                                    />\n                                                }\n                                            />\n                                        )}\n                                    </Form.Item>\n                                    <Form.Item>\n                                        <div style={{ float: 'left' }}>\n                                            <Checkbox\n                                                onChange={\n                                                    this.onChangeRememberMe\n                                                }\n                                            >\n                                                <FormattedMessage id=\"login_remember_me\" />\n                                            </Checkbox>\n                                        </div>\n                                    </Form.Item>\n                                    <Form.Item>\n                                        <Button\n                                            htmlType=\"submit\"\n                                            type=\"primary\"\n                                            onClick={this.onSubmit}\n                                            className=\"login-form-button\"\n                                            size=\"large\"\n                                            loading={bLoginRequesting}\n                                        >\n                                            <FormattedMessage id=\"submit\" />\n                                        </Button>\n                                    </Form.Item>\n                                </Form>\n                            </div>\n                        </Content>\n                    </Layout>\n                </Content>\n            </Layout>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    login: (name: string, password: string) =>\n        dispatch(AccountActions.login(name, password)),\n    changeLanguage: (lang: string) =>\n        dispatch(LanguageActions.changeLanguage(lang)),\n});\n\nconst mapStateToProps = ({ account }: ApplicationState) => ({\n    bLoginRequesting: isLoginRequesting(account),\n    loginError: getLoginError(account),\n    bIsLogin: isLogin(account),\n});\n\nconst WrappedLoginForm = Form.create({ name: 'login_form' })(Login);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(injectIntl(WrappedLoginForm));\n","// import Login from './pages/login';\nimport Home from './pages/dashboard';\nimport Login from './pages/login';\nimport * as React from 'react';\nimport './app.css';\nimport { Route, Switch } from 'react-router';\nimport NotFound from './pages/not-found';\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <div className=\"App\">\n                <Switch>\n                    <Route path=\"/dashboard\" component={Home} />\n                    <Route path=\"/\" component={Login} />\n                    <Route component={NotFound} />\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { AccountActionType, AccountState } from './types';\nimport { Reducer } from 'redux';\nimport { AccountActions } from './actions';\nimport update from 'immutability-helper';\nimport { clearSessionCookie, storeSessionCookie } from '../../constants/cookie';\n\nconst initialState: AccountState = {\n    name: undefined,\n    session: undefined,\n\n    isLoginRequesting: false,\n    errorLogin: undefined,\n\n    isLogoutRequesting: false,\n    errorLogout: undefined,\n\n    isUpdateInfoRequesting: false,\n    errorUpdateInfo: undefined,\n\n    isGetInfoRequesting: false,\n    errorGetInfo: undefined,\n    info: undefined,\n};\n\nconst reducer: Reducer<AccountState> = (\n    state = initialState,\n    action: AccountActions\n) => {\n    switch (action.type) {\n        case AccountActionType.LOGIN:\n            return update(state, {\n                isLoginRequesting: { $set: true },\n                errorLogin: { $set: undefined },\n            });\n\n        case AccountActionType.LOGIN_SUCCESSFUL:\n            const { name, session } = action.payload;\n            if (storeSessionCookie(name, session)) {\n                return update(state, {\n                    isLoginRequesting: { $set: false },\n                    name: { $set: name },\n                    session: { $set: session },\n                });\n            }\n            break;\n\n        case AccountActionType.LOGIN_FAILED:\n            return update(state, {\n                isLoginRequesting: { $set: false },\n                errorLogin: { $set: action.payload },\n            });\n\n        case AccountActionType.LOGOUT:\n            if (clearSessionCookie()) {\n                return update(state, {\n                    isLogoutRequesting: { $set: true },\n                    errorLogout: { $set: undefined },\n                });\n            }\n            break;\n\n        case AccountActionType.LOGOUT_SUCCESSFUL:\n            return update(state, {\n                isLogoutRequesting: { $set: false },\n                name: { $set: undefined },\n                session: { $set: undefined },\n            });\n\n        case AccountActionType.LOGOUT_FAILED:\n            return update(state, {\n                isLogoutRequesting: { $set: false },\n                errorLogout: { $set: action.payload },\n            });\n\n        case AccountActionType.UPDATE_INFO:\n            return update(state, {\n                isUpdateInfoRequesting: { $set: true },\n                errorUpdateInfo: { $set: undefined },\n            });\n\n        case AccountActionType.UPDATE_INFO_SUCCESSFUL: {\n            const { email, phone } = action.payload;\n            return update(state, {\n                isUpdateInfoRequesting: { $set: false },\n                info: { $set: { email: email, phone: phone } },\n            });\n        }\n\n        case AccountActionType.UPDATE_INFO_FAILED:\n            return update(state, {\n                isUpdateInfoRequesting: { $set: false },\n                errorUpdateInfo: { $set: action.payload.error },\n            });\n\n        case AccountActionType.GET_INFO:\n            return update(state, {\n                isGetInfoRequesting: { $set: true },\n                errorGetInfo: { $set: undefined },\n            });\n\n        case AccountActionType.GET_INFO_SUCCESSFUL: {\n            const { email, phone } = action.payload;\n            return update(state, {\n                isGetInfoRequesting: { $set: false },\n                info: { $set: { email: email, phone: phone } },\n            });\n        }\n\n        case AccountActionType.GET_INFO_FAILED: {\n            return update(state, {\n                isGetInfoRequesting: { $set: false },\n                errorGetInfo: { $set: action.payload.error },\n            });\n        }\n    }\n    return state;\n};\n\nexport { reducer as accountReducer };\nexport { initialState as accountInitialState };\n","import { combineReducers } from 'redux';\nimport { lanReducer } from './language/reducers';\nimport { connectRouter, RouterState } from 'connected-react-router';\n// If you use react-router, don't forget to pass in your history type.\nimport { History } from 'history';\nimport { LanguageState } from './language/types';\nimport { accountReducer } from './account/reducers';\nimport { AccountState } from './account/types';\n\nexport interface ApplicationState {\n    account: AccountState;\n    language: LanguageState;\n    router: RouterState;\n}\n\nexport const createRootReducer = (history: History) =>\n    combineReducers<ApplicationState>({\n        account: accountReducer,\n        language: lanReducer,\n        router: connectRouter(history),\n    });\n","import { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { AccountActionType } from '../stores/account/types';\nimport { AccountActions } from '../stores/account/actions';\nimport {\n    fakeGetInfo,\n    fakeLogin,\n    fakeLogout,\n    fakeUpdateInfo,\n} from '../services';\n\nfunction* login(action: AccountActions) {\n    if (action.type === AccountActionType.LOGIN) {\n        const { name, password } = action.payload;\n        try {\n            const session = yield call(fakeLogin, name, password);\n            yield put(AccountActions.loginSuccessful(name, session));\n        } catch (err) {\n            yield put(AccountActions.loginFailed(err));\n        }\n    }\n}\n\nfunction* logout(action: AccountActions) {\n    if (action.type === AccountActionType.LOGOUT) {\n        try {\n            yield call(fakeLogout);\n            yield put(AccountActions.logoutSuccessful());\n        } catch (err) {\n            yield put(AccountActions.logoutFailed(err));\n        }\n    }\n}\n\nfunction* getInfo(action: AccountActions) {\n    if (action.type === AccountActionType.GET_INFO) {\n        try {\n            const { email, phone } = yield call(fakeGetInfo);\n            yield put(AccountActions.getAccountInfoSuccessful(email, phone));\n        } catch (err) {\n            yield put(AccountActions.getInfoFailed(err));\n        }\n    }\n}\n\nfunction* updateInfo(action: AccountActions) {\n    if (action.type === AccountActionType.UPDATE_INFO) {\n        try {\n            const { email, phone } = action.payload;\n            yield call(fakeUpdateInfo, email, phone);\n            yield put(AccountActions.updateInfoSuccessful(email, phone));\n        } catch (err) {\n            yield put(AccountActions.updateInfoFailed(err));\n        }\n    }\n}\n\nexport default function* accountSaga() {\n    yield all([\n        takeEvery(AccountActionType.LOGIN, login),\n        takeEvery(AccountActionType.LOGOUT, logout),\n        takeEvery(AccountActionType.GET_INFO, getInfo),\n        takeEvery(AccountActionType.UPDATE_INFO, updateInfo),\n    ]);\n}\n","import { call, spawn } from 'redux-saga/effects';\nimport accountSaga from './account';\n\nexport default function* rootSaga() {\n    const sagas = [accountSaga];\n    for (const saga of sagas) {\n        yield spawn(function*() {\n            while (true) {\n                try {\n                    yield call(saga);\n                    break;\n                } catch (err) {\n                    console.log(`saga error: ${err.message}`);\n                }\n            }\n        });\n    }\n}\n","import { Store, createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n// `react-router-redux` is deprecated, so we use `connected-react-router`.\n// This provides a Redux middleware which connects to our `react-router` instance.\nimport { routerMiddleware } from 'connected-react-router';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n// Import the state interface and our combined reducers/sagas.\nimport { ApplicationState, createRootReducer } from './stores';\nimport { History } from 'history';\nimport rootSaga from './sagas';\n\nfunction configureStore(\n    history: History,\n    initialState: ApplicationState\n): Store<ApplicationState> {\n    // create the composing function for our middleware\n    // create the redux-saga middleware\n    const sagaMiddleware = createSagaMiddleware();\n\n    // We'll create our store with the combined reducers/sagas, and the initial Redux state that\n    // we'll be passing from our entry point.\n    const enhancer =\n        process.env.NODE_ENV === 'development'\n            ? composeWithDevTools(\n                  applyMiddleware(routerMiddleware(history), sagaMiddleware)\n              )\n            : applyMiddleware(routerMiddleware(history), sagaMiddleware);\n\n    const store = createStore(\n        createRootReducer(history),\n        initialState,\n        enhancer\n    );\n\n    // Don't forget to run the root saga, and return the store object.\n    sagaMiddleware.run(rootSaga);\n    return store;\n}\n\nexport default configureStore;\n","class BaseConfig {\n    public readonly host: string;\n    public readonly basePath: string;\n    public readonly bIsDev: boolean = true;\n    constructor(isDev: boolean, host: string, basePath: string) {\n        this.bIsDev = isDev;\n        this.host = basePath;\n        this.basePath = basePath\n    }\n}\nlet config: BaseConfig;\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    config = new BaseConfig(true, 'http://localhost:3000', '/sample-redux-sagas-client');\n} else {\n    config = new BaseConfig(false, 'https://weishi258.github.io', '/sample-redux-sagas-client');\n}\nexport default config;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './app';\nimport './index.css';\n// import registerServiceWorker from './registerServiceWorker';\nimport configureStore from './configure-store';\nimport { createBrowserHistory } from 'history';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { getLangCookie, getSessionCookie } from './constants/cookie';\nimport { accountInitialState } from './stores/account/reducers';\nimport { LocaleProvider } from 'antd';\nimport { IntlProvider } from 'react-intl';\nimport { getLanguageSetting } from './utils/language-helpers';\nimport config from './configs/config';\n\n// get history\nconst history = createBrowserHistory({ basename: config.basePath });\n\n// lets check if we have language cookie stored, if not using browser default\nconst language = getLangCookie();\nconst languageSetting = getLanguageSetting(language);\n\n// lets check if user logged in\nconst sessionCookie = getSessionCookie();\nconst sessionState =\n    sessionCookie !== undefined\n        ? {\n              ...accountInitialState,\n              name: sessionCookie.name,\n              session: sessionCookie.session,\n          }\n        : accountInitialState;\n\nconst store = configureStore(history, {\n    account: sessionState,\n    language: { language: language },\n    router: {\n        location: { pathname: '/', search: '', hash: '', state: null },\n        action: 'REPLACE',\n    },\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <IntlProvider\n            locale={languageSetting.languageWithoutRegionCode}\n            messages={languageSetting.messages}\n        >\n            <LocaleProvider locale={languageSetting.locale}>\n                <ConnectedRouter history={history} >\n                    <App />\n                </ConnectedRouter>\n            </LocaleProvider>\n        </IntlProvider>\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\n"],"sourceRoot":""}