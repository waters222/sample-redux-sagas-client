{"version":3,"sources":["stores/language/types.ts","stores/action-helper.ts","stores/language/actions.ts","stores/account/types.ts","pages/account.tsx","pages/not-found.tsx","stores/account/selectors.ts","stores/account/actions.ts","constants/cookie.ts","stores/language/reducers.ts","utils/language-helpers.ts","services/index.ts","pages/dashboard.tsx","pages/login.tsx","app.tsx","stores/account/reducers.ts","stores/index.ts","sagas/account.ts","sagas/index.ts","configure-store.ts","configs/config.ts","index.tsx"],"names":["LanguageActionType","createAction","type","payload","undefined","AccountActionType","LanguageActions","name","CHANGE_LANGUAGE","lang","Account","react","React","NotFound","onClickBackToHome","_this","props","history","push","className","index_es","id","es_button","size","onClick","this","isLogin","createSelector","state","session","getLoginError","errorLogin","Cookie","AccountActions","login","password","LOGIN","loginSuccessful","LOGIN_SUCCESSFUL","loginFailed","error","LOGIN_FAILED","logout","LOGOUT","logoutSuccessful","LOGOUT_SUCCESSFUL","logoutFailed","LOGOUT_FAILED","DefaultLanguage","initialState","language","reducer","arguments","length","action","ResolveLanguage","console","log","concat","Cookies","Language","storeLangCookie","location","reload","Languages","key","getLanguageWithoutRegionCode","toLowerCase","split","replace","ErrorAjaxType","Header","Layout","Sider","Content","Dashboard","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChangeLanguage","e","changeLanguage","toggle","setState","collapsed","onClickLogout","langMenu","menuItems","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","menu","Item","err","return","accountMenu","icon","Divider","nextProps","nextState","nextContext","bIsLogin","layout","trigger","collapsible","theme","mode","defaultSelectedKeys","dropdown","overlay","userName","Switch","Route","path","component","Redirect","to","connect","_ref","account","dispatch","Login","onChangeUserName","target","onChangePassword","onChangeRememberMe","checked","onSubmit","form","validateFields","values","getFieldDecorator","_this$props","intl","bLoginRequesting","loginError","login_Header","login_Content","es_alert","showIcon","message","formatMessage","es_form","rules","required","input","placeholder","prefix","style","color","onChange","float","es_checkbox","htmlType","loading","WrappedLoginForm","Form","create","isLoginRequesting","injectIntl","App","exact","Home","isLogoutRequesting","errorLogout","update","$set","_action$payload","Session","JSON","stringify","storeSessionCookie","clearSessionCookie","createRootReducer","combineReducers","accountReducer","lanReducer","router","connectRouter","ErrorAjax","Error","fakeSession","asyncTimeout","ms","Promise","resolve","setTimeout","fakeLogin","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","Date","now","INVALID_PASSWORD","abrupt","stop","_x","_x2","apply","fakeLogout","_ref2","_callee2","_context2","accountSaga","sent","put","t0","_marked","_marked2","_context3","all","takeEvery","_marked3","rootSaga","_arr","_loop","_i","saga","spawn","delegateYield","sagas_marked","configureStore","sagaMiddleware","createSagaMiddleware","enhancer","applyMiddleware","routerMiddleware","store","createStore","run","config","BaseConfig","isDev","host","basePath","bIsDev","createBrowserHistory","basename","navigator","languages","getLangCookie","languageSetting","addLocaleData","zh","languageWithoutRegionCode","locale","zhCN","messages","zhCNMessages","en","enUS","enUSMessages","getLanguageSetting","sessionCookie","sessionObject","parse","getSessionCookie","objectSpread","accountInitialState","pathname","search","hash","ReactDOM","es","locale_provider","lib","src_app","document","getElementById"],"mappings":"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","file":"static/js/main.cd3f18f1.chunk.js","sourcesContent":["export enum LanguageActionType {\n    CHANGE_LANGUAGE = '@@language/CHANGE_LANGUAGE',\n}\n\nexport interface LanguageState {\n    readonly language: string;\n}\n","export interface Action<T extends string> {\n    type: T;\n}\n\nexport interface ActionWithPayload<T extends string, P> extends Action<T> {\n    payload: P;\n}\n\nexport function createAction<T extends string>(type: T): Action<T>;\nexport function createAction<T extends string, P>(\n    type: T,\n    payload: P\n): ActionWithPayload<T, P>;\nexport function createAction<T extends string, P>(type: T, payload?: P) {\n    return payload === undefined ? { type } : { type, payload };\n}\n\ntype FunctionType = (...args: any[]) => any;\ntype ActionCreatorsMapObject = { [actionCreator: string]: FunctionType };\nexport type ActionUnion<A extends ActionCreatorsMapObject> = ReturnType<\n    A[keyof A]\n>;\n","import { ActionUnion, createAction } from '../action-helper';\nimport { LanguageActionType } from './types';\n\nexport const LanguageActions = {\n    changeLanguage: (name: string) =>\n        createAction(LanguageActionType.CHANGE_LANGUAGE, { lang: name }),\n};\n\nexport type LanguageActions = ActionUnion<typeof LanguageActions>;\n","import { ErrorAjax } from '../../services';\n\nexport enum AccountActionType {\n    LOGIN = '@@account/LOGIN',\n    LOGIN_SUCCESSFUL = '@@account/LOGIN_SUCCESSFUL',\n    LOGIN_FAILED = '@@account/LOGIN_FAILED',\n    LOGOUT = '@@account/LOGOUT',\n    LOGOUT_SUCCESSFUL = '@@account/LOGOUT_SUCCESSFUL',\n    LOGOUT_FAILED = '@@account/LOGOUT_FAILED',\n}\n\nexport interface AccountState {\n    readonly name: string | undefined;\n    readonly session: string | undefined;\n\n    readonly isLoginRequesting: boolean;\n    readonly errorLogin: ErrorAjax | undefined;\n\n    readonly isLogoutRequesting: boolean;\n    readonly errorLogout: ErrorAjax | undefined;\n}\n","import * as React from 'react';\n\nclass Account extends React.Component<{}, {}> {\n    public render() {\n        return <span>this is account page</span>;\n    }\n}\n\nexport default Account;\n","import * as React from 'react';\nimport { Button } from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport './not-found.less';\nimport { RouteComponentProps } from 'react-router';\n\nclass NotFound extends React.Component<RouteComponentProps> {\n    public onClickBackToHome = () => {\n        this.props.history.push('/dashboard');\n    };\n\n    public render() {\n        return (\n            <div className=\"layout-top-layer not-found\">\n                <div className=\"container\">\n                    <h1>404</h1>\n                    <div className=\"not-found-desc\">\n                        <FormattedMessage id=\"not_fount_desc\" />\n                    </div>\n                    <div className=\"not-fount-actions\">\n                        <Button\n                            type=\"primary\"\n                            size=\"large\"\n                            onClick={this.onClickBackToHome}\n                        >\n                            <FormattedMessage id=\"back_to_home\" />\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default NotFound;\n","import { createSelector, Selector } from 'reselect';\nimport { AccountState } from './types';\n\nexport const getSession = (state: AccountState) => state.session;\n\nexport const getName = (state: AccountState) => state.name;\n\nexport const isLogin: Selector<AccountState, boolean> = createSelector(\n    getSession,\n    getName,\n    (session, name) => session !== undefined && name !== undefined\n);\n\nexport const isLoginRequesting = (state: AccountState) =>\n    state.isLoginRequesting;\nexport const getLoginError = (state: AccountState) => state.errorLogin;\n","import { AccountActionType } from './types';\nimport { ActionUnion, createAction } from '../action-helper';\nimport { ErrorAjax } from '../../services';\n\nexport const AccountActions = {\n    login: (name: string, password: string) =>\n        createAction(AccountActionType.LOGIN, {\n            name: name,\n            password: password,\n        }),\n\n    loginSuccessful: (name: string, session: string) =>\n        createAction(AccountActionType.LOGIN_SUCCESSFUL, {\n            name: name,\n            session: session,\n        }),\n\n    loginFailed: (error: ErrorAjax) =>\n        createAction(AccountActionType.LOGIN_FAILED, error),\n\n    logout: () => createAction(AccountActionType.LOGOUT),\n\n    logoutSuccessful: () => createAction(AccountActionType.LOGOUT_SUCCESSFUL),\n\n    logoutFailed: (error: ErrorAjax) =>\n        createAction(AccountActionType.LOGOUT_FAILED, error),\n};\n\nexport type AccountActions = ActionUnion<typeof AccountActions>;\n","import * as Cookies from 'es-cookie';\n\nexport enum Cookie {\n    Language = 'cookie/language',\n    Session = 'cookie/session',\n}\n\n// for language setting\nconst getLangCookie = (): string => {\n    const language = Cookies.get(Cookie.Language);\n    return language !== undefined\n        ? language\n        : (navigator.languages && navigator.languages[0]) || navigator.language;\n};\n\nconst storeLangCookie = (lang: string) => {\n    Cookies.set(Cookie.Language, lang);\n};\n\n//  for session\nexport interface SessionCookieType {\n    name: string;\n    session: string;\n}\n\nconst getSessionCookie = (): SessionCookieType | undefined => {\n    const sessionCookie = Cookies.get(Cookie.Session);\n    if (sessionCookie !== undefined) {\n        try {\n            const sessionObject = JSON.parse(sessionCookie);\n\n            // make sure both field is not empty\n            if (\n                sessionObject.name !== undefined &&\n                sessionObject.name !== '' &&\n                sessionObject.session !== undefined &&\n                sessionObject.session !== ''\n            ) {\n                return {\n                    name: sessionObject.name,\n                    session: sessionObject.session,\n                };\n            }\n        } catch (err) {\n            console.log(\n                `[ERROR] parse session cookie object failed: ${err.message}`\n            );\n        }\n    }\n    return undefined;\n};\n\nconst storeSessionCookie = (name: string, session: string): boolean => {\n    try {\n        Cookies.set(\n            Cookie.Session,\n            JSON.stringify({ name: name, session: session })\n        );\n        return true;\n    } catch (err) {\n        console.log(`[ERROR] store session into cookie failed: ${err.message}`);\n        return false;\n    }\n};\n\nconst clearSessionCookie = (): boolean => {\n    try {\n        Cookies.remove(Cookie.Session);\n        return true;\n    } catch (err) {\n        console.log(`[ERROR] clear session into cookie failed: ${err.message}`);\n        return false;\n    }\n};\n\nexport {\n    getSessionCookie,\n    storeSessionCookie,\n    clearSessionCookie,\n    getLangCookie,\n    storeLangCookie,\n};\n","import { LanguageActionType, LanguageState } from './types';\nimport { Reducer } from 'redux';\nimport { storeLangCookie } from '../../constants/cookie';\nimport { ResolveLanguage } from '../../utils/language-helpers';\n\nexport const DefaultLanguage = 'en_US';\n\nconst initialState: LanguageState = {\n    language: DefaultLanguage,\n};\n\nconst reducer: Reducer<LanguageState> = (state = initialState, action) => {\n    if (action.type === LanguageActionType.CHANGE_LANGUAGE) {\n        const { lang } = action.payload;\n        const language = ResolveLanguage(lang);\n        // lets save the cookie\n        console.log(`change lang from ${state.language} to ${language}`);\n        if (state.language !== language) {\n            storeLangCookie(language);\n            location.reload();\n        }\n    }\n    return state;\n};\n\nexport { reducer as lanReducer };\n","import { addLocaleData } from 'react-intl';\nimport { Locale } from 'antd/lib/locale-provider';\nimport { DefaultLanguage } from '../stores/language/reducers';\n\nimport * as en from 'react-intl/locale-data/en';\nimport enUS from 'antd/lib/locale-provider/en_US';\nimport enUSMessages from '../locales/en_US.json';\n\nimport * as zh from 'react-intl/locale-data/zh';\nimport zhCN from 'antd/lib/locale-provider/zh_CN';\nimport zhCNMessages from '../locales/zh_CN.json';\n\nexport interface LanguageTypes {\n    key: string;\n    name: string;\n}\n\nexport const Languages = [\n    {\n        key: 'zh_CN',\n        name: 'lang_chinese',\n    },\n    {\n        key: 'en_US',\n        name: 'lang_english',\n    },\n];\n\nexport interface LanguageSetting {\n    readonly languageWithoutRegionCode: string;\n    readonly messages: object;\n    readonly locale: Locale;\n}\n\nexport function getLanguageWithoutRegionCode(language: string) {\n    return language.toLowerCase().split(/[_-]+/)[0];\n}\n\nexport function ResolveLanguage(name: string): string {\n    name = name.replace('-', '_');\n    switch (name) {\n        case 'zh_CN':\n            return name;\n        default:\n            return DefaultLanguage;\n    }\n}\n\nexport function getLanguageSetting(language: string): LanguageSetting {\n    language = ResolveLanguage(language);\n    // default en_US no need to add language\n    switch (language) {\n        case 'zh_CN': {\n            addLocaleData(zh);\n            return {\n                languageWithoutRegionCode: getLanguageWithoutRegionCode(\n                    language\n                ),\n                locale: zhCN,\n                messages: zhCNMessages,\n            };\n        }\n        default: {\n            addLocaleData(en);\n            return {\n                languageWithoutRegionCode: getLanguageWithoutRegionCode(\n                    DefaultLanguage\n                ),\n                locale: enUS,\n                messages: enUSMessages,\n            };\n        }\n    }\n}\n","class ErrorAjax extends Error {\n    public id: string;\n    public message: string = '';\n    constructor(id: string, message?: string) {\n        super(message);\n        this.id = id;\n        if (message !== undefined) {\n            this.message = message;\n        }\n    }\n}\n\nexport enum ErrorAjaxType {\n    INVALID_PASSWORD = 'ajax_invalid_password',\n}\n\nconst asyncTimeout = (ms: number) => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nlet fakeSession: string | undefined;\n\nconst fakeLogin = async (name: string, password: string) => {\n    await asyncTimeout(1500);\n    if (name === 'admin' && password === 'admin') {\n        fakeSession = `fake_session_${Date.now()}`;\n    } else {\n        throw new ErrorAjax(ErrorAjaxType.INVALID_PASSWORD);\n    }\n    return fakeSession;\n};\n\nconst fakeLogout = async () => {\n    await asyncTimeout(300);\n    if (fakeSession !== undefined) {\n        fakeSession = undefined;\n    }\n};\nexport { fakeLogin, fakeLogout, ErrorAjax };\n","import * as React from 'react';\nimport { Dispatch } from 'redux';\nimport { ApplicationState } from '../stores';\nimport { connect } from 'react-redux';\nimport { LanguageActions } from '../stores/language/actions';\nimport { Dropdown, Icon, Layout, Menu } from 'antd';\nimport './dashboard.less';\nimport { Redirect, Route, Switch } from 'react-router';\nimport Account from './account';\nimport NotFound from './not-found';\nimport { isLogin } from '../stores/account/selectors';\nimport { AccountActions } from '../stores/account/actions';\nimport { FormattedMessage } from 'react-intl';\nimport { ClickParam } from 'antd/lib/menu';\nimport { Languages } from '../utils/language-helpers';\n\nconst { Header, Sider, Content } = Layout;\n\ninterface Props {\n    readonly language: string;\n    readonly userName: string | undefined;\n    readonly bIsLogin: boolean;\n    changeLanguage: (language: string) => void;\n    logout: () => void;\n}\n\ninterface States {\n    collapsed: boolean;\n}\n\nclass Dashboard extends React.Component<Props, States> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            collapsed: false,\n        };\n    }\n\n    public onChangeLanguage = (e: ClickParam) => {\n        this.props.changeLanguage(e.key);\n    };\n\n    public shouldComponentUpdate(\n        nextProps: Props,\n        nextState: States,\n        nextContext: any\n    ): boolean {\n        return this.props.language === nextProps.language;\n    }\n\n    public toggle = () => {\n        this.setState({ collapsed: !this.state.collapsed });\n    };\n\n    public onClickLogout = () => {\n        this.props.logout();\n    };\n\n    public langMenu = () => {\n        const menuItems = [];\n        for (const lang of Languages) {\n            menuItems.push(\n                <Menu.Item key={lang.key}>\n                    <FormattedMessage id={lang.name} />\n                </Menu.Item>\n            );\n        }\n        return (\n            <Menu className=\"dropdown-menu\" onClick={this.onChangeLanguage}>\n                {menuItems}\n            </Menu>\n        );\n    };\n\n    public accountMenu = () => {\n        return (\n            <Menu className=\"dropdown-menu\">\n                <Menu.Item>\n                    <Icon type=\"user\" />\n                    <FormattedMessage id=\"account_info\" />\n                </Menu.Item>\n                <Menu.Divider />\n                <Menu.Item onClick={this.onClickLogout}>\n                    <Icon type=\"logout\" />\n                    <FormattedMessage id=\"logout\" />\n                </Menu.Item>\n            </Menu>\n        );\n    };\n\n    public render() {\n        if (!this.props.bIsLogin) {\n            return <Redirect to=\"/\" />;\n        }\n        return (\n            <Layout className=\"layout-top-layer\">\n                <Sider\n                    trigger={null}\n                    collapsible={true}\n                    collapsed={this.state.collapsed}\n                >\n                    <Menu\n                        theme=\"dark\"\n                        mode=\"inline\"\n                        defaultSelectedKeys={['1']}\n                    >\n                        <Menu.Item key=\"1\">\n                            <Icon type=\"user\" />\n                            <span>nav 1</span>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Icon type=\"video-camera\" />\n                            <span>nav 2</span>\n                        </Menu.Item>\n                        <Menu.Item key=\"3\">\n                            <Icon type=\"upload\" />\n                            <span>nav 3</span>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Layout>\n                    <Header className=\"header-white header-index\">\n                        <div className=\"header-index-box-shadow\">\n                            <span\n                                className=\"header-index-trigger\"\n                                onClick={this.toggle}\n                            >\n                                <Icon\n                                    className=\"trigger\"\n                                    type={\n                                        this.state.collapsed\n                                            ? 'menu-unfold'\n                                            : 'menu-fold'\n                                    }\n                                />\n                            </span>\n                            <div className=\"header-index-right\">\n                                <Dropdown overlay={this.accountMenu}>\n                                    <span className=\"index-action\">\n                                        <Icon type=\"user\" />\n                                        <span className=\"user-name\">\n                                            {this.props.userName}\n                                        </span>\n                                    </span>\n                                </Dropdown>\n                                <Dropdown overlay={this.langMenu}>\n                                    <span className=\"index-action lang-select-dropdown\">\n                                        <Icon type=\"global\" />\n                                    </span>\n                                </Dropdown>\n                            </div>\n                        </div>\n                    </Header>\n                    <Content className=\"content\">\n                        <Switch>\n                            <Route path=\"/account\" component={Account} />\n                            <Route component={NotFound} />\n                        </Switch>\n                    </Content>\n                </Layout>\n            </Layout>\n        );\n    }\n}\n\nconst mapStateToProps = ({ language, account }: ApplicationState) => ({\n    language: language.language,\n    userName: account.name,\n    bIsLogin: isLogin(account),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    changeLanguage: (language: string) =>\n        dispatch(LanguageActions.changeLanguage(language)),\n    logout: () => dispatch(AccountActions.logout()),\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Dashboard);\n","import * as React from 'react';\nimport {\n    Alert,\n    Button,\n    Checkbox,\n    Dropdown,\n    Form,\n    Icon,\n    Input,\n    Layout,\n} from 'antd';\nimport { ChangeEvent } from 'react';\nimport { AccountActions } from '../stores/account/actions';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { FormComponentProps } from 'antd/lib/form';\nimport { FormattedMessage, injectIntl, InjectedIntlProps } from 'react-intl';\nimport './login.less';\nimport { Menu } from 'antd';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport { ApplicationState } from '../stores';\nimport {\n    getLoginError,\n    isLogin,\n    isLoginRequesting,\n} from '../stores/account/selectors';\nimport { ErrorAjax } from '../services';\nimport { Redirect } from 'react-router';\nimport { LanguageActions } from '../stores/language/actions';\nimport { ClickParam } from 'antd/lib/menu';\nimport { Languages } from '../utils/language-helpers';\n\nconst { Header, Content } = Layout;\n\ninterface Props extends FormComponentProps, InjectedIntlProps {\n    login: (name: string, password: string) => void;\n    changeLanguage: (lang: string) => void;\n    logout: () => void;\n    bIsLogin: boolean;\n    bLoginRequesting: boolean;\n    loginError: ErrorAjax | undefined;\n}\n\ninterface States {\n    userName: string;\n    password: string;\n}\n\nclass Login extends React.Component<Props, States> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            userName: '',\n            password: '',\n        };\n    }\n\n    public onChangeUserName = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({ userName: e.target.value });\n    };\n\n    public onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({ password: e.target.value });\n    };\n\n    public onChangeRememberMe = (e: CheckboxChangeEvent) => {\n        console.log(`remember me: ${e.target.checked}`);\n    };\n\n    public onSubmit = () => {\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                this.props.login(values.userName, values.password);\n            }\n        });\n    };\n\n    public onChangeLanguage = (e: ClickParam) => {\n        this.props.changeLanguage(e.key);\n    };\n\n    public langMenu = () => {\n        const menuItems = [];\n        for (const lang of Languages) {\n            menuItems.push(\n                <Menu.Item key={lang.key}>\n                    <FormattedMessage id={lang.name} />\n                </Menu.Item>\n            );\n        }\n        return (\n            <Menu className=\"dropdown-menu\" onClick={this.onChangeLanguage}>\n                {menuItems}\n            </Menu>\n        );\n    };\n\n    public render() {\n        const { getFieldDecorator } = this.props.form;\n        const { intl, bLoginRequesting, loginError, bIsLogin } = this.props;\n        if (bIsLogin) {\n            return <Redirect to=\"/dashboard\" />;\n        }\n        return (\n            <Layout className=\"layout-top-layer\">\n                <Header className=\"header-light\">\n                    <div className=\"header-index\">\n                        <div className=\"header-index-right\">\n                            <Dropdown overlay={this.langMenu}>\n                                <span className=\"index-action lang-select-dropdown\">\n                                    <Icon type=\"global\" />\n                                </span>\n                            </Dropdown>\n                        </div>\n                    </div>\n                </Header>\n                <Content>\n                    <Layout>\n                        <Header className=\"header-light header-index-center\">\n                            <span className=\"header-title\">\n                                <FormattedMessage id=\"client_title\" />\n                            </span>\n                        </Header>\n                        <Content>\n                            <div className=\"header-desc\">\n                                <FormattedMessage id=\"client_desc\" />\n                            </div>\n                            <div className=\"container\">\n                                {loginError !== undefined ? (\n                                    <Alert\n                                        showIcon={true}\n                                        type=\"error\"\n                                        message={intl.formatMessage({\n                                            id: loginError.id,\n                                        })}\n                                    />\n                                ) : null}\n                                <Form className=\"login-form\">\n                                    <Form.Item>\n                                        {getFieldDecorator('userName', {\n                                            rules: [\n                                                {\n                                                    required: true,\n                                                    message: intl.formatMessage(\n                                                        {\n                                                            id:\n                                                                'login_username_input_error_empty',\n                                                        }\n                                                    ),\n                                                },\n                                            ],\n                                        })(\n                                            <Input\n                                                placeholder={intl.formatMessage(\n                                                    {\n                                                        id:\n                                                            'login_input_placeholder_user_name',\n                                                    }\n                                                )}\n                                                size=\"large\"\n                                                prefix={\n                                                    <Icon\n                                                        type=\"user\"\n                                                        style={{\n                                                            color:\n                                                                'rgba(0,0,0,.25)',\n                                                        }}\n                                                    />\n                                                }\n                                                onChange={this.onChangeUserName}\n                                            />\n                                        )}\n                                    </Form.Item>\n                                    <Form.Item>\n                                        {getFieldDecorator('password', {\n                                            rules: [\n                                                {\n                                                    required: true,\n                                                    message: intl.formatMessage(\n                                                        {\n                                                            id:\n                                                                'login_password_input_error_empty',\n                                                        }\n                                                    ),\n                                                },\n                                            ],\n                                        })(\n                                            <Input\n                                                placeholder={intl.formatMessage(\n                                                    {\n                                                        id:\n                                                            'login_input_placeholder_password',\n                                                    }\n                                                )}\n                                                type=\"password\"\n                                                size=\"large\"\n                                                prefix={\n                                                    <Icon\n                                                        type=\"lock\"\n                                                        style={{\n                                                            color:\n                                                                'rgba(0,0,0,.25)',\n                                                        }}\n                                                    />\n                                                }\n                                                onChange={this.onChangePassword}\n                                            />\n                                        )}\n                                    </Form.Item>\n                                    <Form.Item>\n                                        <div style={{ float: 'left' }}>\n                                            <Checkbox\n                                                onChange={\n                                                    this.onChangeRememberMe\n                                                }\n                                            >\n                                                <FormattedMessage id=\"login_remember_me\" />\n                                            </Checkbox>\n                                        </div>\n                                    </Form.Item>\n                                    <Form.Item>\n                                        <Button\n                                            htmlType=\"submit\"\n                                            type=\"primary\"\n                                            onClick={this.onSubmit}\n                                            className=\"login-form-button\"\n                                            size=\"large\"\n                                            loading={bLoginRequesting}\n                                        >\n                                            <FormattedMessage id=\"submit\" />\n                                        </Button>\n                                    </Form.Item>\n                                </Form>\n                            </div>\n                        </Content>\n                    </Layout>\n                </Content>\n            </Layout>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    login: (name: string, password: string) =>\n        dispatch(AccountActions.login(name, password)),\n    changeLanguage: (lang: string) =>\n        dispatch(LanguageActions.changeLanguage(lang)),\n});\n\nconst mapStateToProps = ({ account }: ApplicationState) => ({\n    bLoginRequesting: isLoginRequesting(account),\n    loginError: getLoginError(account),\n    bIsLogin: isLogin(account),\n});\n\nconst WrappedLoginForm = Form.create({ name: 'login_form' })(Login);\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(injectIntl(WrappedLoginForm));\n","// import Login from './pages/login';\nimport Home from './pages/dashboard';\nimport Login from './pages/login';\nimport * as React from 'react';\nimport './app.css';\nimport { Route, Switch } from 'react-router';\nimport NotFound from './pages/not-found';\n\nclass App extends React.Component {\n    public render() {\n        return (\n            <div className=\"App\">\n                <Switch>\n                    <Route exact={true} path=\"/\" component={Login} />\n                    <Route path=\"/dashboard\" component={Home} />\n                    <Route component={NotFound} />\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { AccountActionType, AccountState } from './types';\nimport { Reducer } from 'redux';\nimport { AccountActions } from './actions';\nimport update from 'immutability-helper';\nimport { clearSessionCookie, storeSessionCookie } from '../../constants/cookie';\n\nconst initialState: AccountState = {\n    name: undefined,\n    session: undefined,\n    isLoginRequesting: false,\n    errorLogin: undefined,\n    isLogoutRequesting: false,\n    errorLogout: undefined,\n};\n\nconst reducer: Reducer<AccountState> = (\n    state = initialState,\n    action: AccountActions\n) => {\n    switch (action.type) {\n        case AccountActionType.LOGIN:\n            return update(state, {\n                isLoginRequesting: { $set: true },\n                errorLogin: { $set: undefined },\n            });\n\n        case AccountActionType.LOGIN_SUCCESSFUL:\n            const { name, session } = action.payload;\n            if (storeSessionCookie(name, session)) {\n                return update(state, {\n                    isLoginRequesting: { $set: false },\n                    name: { $set: name },\n                    session: { $set: session },\n                });\n            }\n            break;\n\n        case AccountActionType.LOGIN_FAILED:\n            return update(state, {\n                isLoginRequesting: { $set: false },\n                errorLogin: { $set: action.payload },\n            });\n\n        case AccountActionType.LOGOUT:\n            if (clearSessionCookie()) {\n                return update(state, {\n                    isLogoutRequesting: { $set: true },\n                    errorLogout: { $set: undefined },\n                });\n            }\n            break;\n\n        case AccountActionType.LOGOUT_SUCCESSFUL:\n            return update(state, {\n                isLogoutRequesting: { $set: false },\n                name: { $set: undefined },\n                session: { $set: undefined },\n            });\n\n        case AccountActionType.LOGOUT_FAILED:\n            return update(state, {\n                isLogoutRequesting: { $set: false },\n                errorLogout: { $set: action.payload },\n            });\n    }\n    return state;\n};\n\nexport { reducer as accountReducer };\nexport { initialState as accountInitialState };\n","import { combineReducers } from 'redux';\nimport { lanReducer } from './language/reducers';\nimport { connectRouter, RouterState } from 'connected-react-router';\n// If you use react-router, don't forget to pass in your history type.\nimport { History } from 'history';\nimport { LanguageState } from './language/types';\nimport { accountReducer } from './account/reducers';\nimport { AccountState } from './account/types';\n\nexport interface ApplicationState {\n    account: AccountState;\n    language: LanguageState;\n    router: RouterState;\n}\n\nexport const createRootReducer = (history: History) =>\n    combineReducers<ApplicationState>({\n        account: accountReducer,\n        language: lanReducer,\n        router: connectRouter(history),\n    });\n","import { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { AccountActionType } from '../stores/account/types';\nimport { AccountActions } from '../stores/account/actions';\nimport { fakeLogin, fakeLogout } from '../services';\n\nfunction* login(action: AccountActions) {\n    if (action.type === AccountActionType.LOGIN) {\n        const { name, password } = action.payload;\n        try {\n            const session = yield call(fakeLogin, name, password);\n            yield put(AccountActions.loginSuccessful(name, session));\n        } catch (err) {\n            yield put(AccountActions.loginFailed(err));\n        }\n    }\n}\n\nfunction* logout(action: AccountActions) {\n    if (action.type === AccountActionType.LOGOUT) {\n        try {\n            yield call(fakeLogout);\n            yield put(AccountActions.logoutSuccessful());\n        } catch (err) {\n            yield put(AccountActions.logoutFailed(err.message));\n        }\n    }\n    return true;\n}\n\nexport default function* accountSaga() {\n    yield all([\n        takeEvery(AccountActionType.LOGIN, login),\n        takeEvery(AccountActionType.LOGOUT, logout),\n    ]);\n}\n","import { call, spawn } from 'redux-saga/effects';\nimport accountSaga from './account';\n\nexport default function* rootSaga() {\n    const sagas = [accountSaga];\n    for (const saga of sagas) {\n        yield spawn(function*() {\n            while (true) {\n                try {\n                    yield call(saga);\n                    break;\n                } catch (err) {\n                    console.log(`saga error: ${err.message}`);\n                }\n            }\n        });\n    }\n}\n","import { Store, createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n// `react-router-redux` is deprecated, so we use `connected-react-router`.\n// This provides a Redux middleware which connects to our `react-router` instance.\nimport { routerMiddleware } from 'connected-react-router';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n// Import the state interface and our combined reducers/sagas.\nimport { ApplicationState, createRootReducer } from './stores';\nimport { History } from 'history';\nimport rootSaga from './sagas';\n\nfunction configureStore(\n    history: History,\n    initialState: ApplicationState\n): Store<ApplicationState> {\n    // create the composing function for our middleware\n    // create the redux-saga middleware\n    const sagaMiddleware = createSagaMiddleware();\n\n    // We'll create our store with the combined reducers/sagas, and the initial Redux state that\n    // we'll be passing from our entry point.\n    const enhancer =\n        process.env.NODE_ENV === 'development'\n            ? composeWithDevTools(\n                  applyMiddleware(routerMiddleware(history), sagaMiddleware)\n              )\n            : applyMiddleware(routerMiddleware(history), sagaMiddleware);\n\n    const store = createStore(\n        createRootReducer(history),\n        initialState,\n        enhancer\n    );\n\n    // Don't forget to run the root saga, and return the store object.\n    sagaMiddleware.run(rootSaga);\n    return store;\n}\n\nexport default configureStore;\n","class BaseConfig {\n    public readonly host: string;\n    public readonly basePath: string;\n    public readonly bIsDev: boolean = true;\n    constructor(isDev: boolean, host: string, basePath: string) {\n        this.bIsDev = isDev;\n        this.host = basePath;\n        this.basePath = basePath\n    }\n}\nlet config: BaseConfig;\nif (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n    config = new BaseConfig(true, 'http://localhost:3000', '/sample-redux-sagas-client');\n} else {\n    config = new BaseConfig(false, 'https://weishi258.github.io', '/sample-redux-sagas-client');\n}\nexport default config;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './app';\nimport './index.css';\n// import registerServiceWorker from './registerServiceWorker';\nimport configureStore from './configure-store';\nimport { createBrowserHistory } from 'history';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { getLangCookie, getSessionCookie } from './constants/cookie';\nimport { accountInitialState } from './stores/account/reducers';\nimport { LocaleProvider } from 'antd';\nimport { IntlProvider } from 'react-intl';\nimport { getLanguageSetting } from './utils/language-helpers';\nimport config from './configs/config';\n\n// get history\nconst history = createBrowserHistory({ basename: config.basePath });\n\n// lets check if we have language cookie stored, if not using browser default\nconst language = getLangCookie();\nconst languageSetting = getLanguageSetting(language);\n\n// lets check if user logged in\nconst sessionCookie = getSessionCookie();\nconst sessionState =\n    sessionCookie !== undefined\n        ? {\n              ...accountInitialState,\n              name: sessionCookie.name,\n              session: sessionCookie.session,\n          }\n        : accountInitialState;\n\nconst store = configureStore(history, {\n    account: sessionState,\n    language: { language: language },\n    router: {\n        location: { pathname: '/', search: '', hash: '', state: null },\n        action: 'REPLACE',\n    },\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <IntlProvider\n            locale={languageSetting.languageWithoutRegionCode}\n            messages={languageSetting.messages}\n        >\n            <LocaleProvider locale={languageSetting.locale}>\n                <ConnectedRouter history={history} >\n                    <App />\n                </ConnectedRouter>\n            </LocaleProvider>\n        </IntlProvider>\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\n"],"sourceRoot":""}